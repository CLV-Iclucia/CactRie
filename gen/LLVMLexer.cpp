
// Generated from /home/creeper/CLionProjects/CactRie/chiisai-llvm/grammar/LLVMLexer.g4 by ANTLR 4.13.2


#include "LLVMLexer.h"


using namespace antlr4;



using namespace antlr4;

namespace {

struct LLVMLexerStaticData final {
  LLVMLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  LLVMLexerStaticData(const LLVMLexerStaticData&) = delete;
  LLVMLexerStaticData(LLVMLexerStaticData&&) = delete;
  LLVMLexerStaticData& operator=(const LLVMLexerStaticData&) = delete;
  LLVMLexerStaticData& operator=(LLVMLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag llvmlexerLexerOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
std::unique_ptr<LLVMLexerStaticData> llvmlexerLexerStaticData = nullptr;

void llvmlexerLexerInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (llvmlexerLexerStaticData != nullptr) {
    return;
  }
#else
  assert(llvmlexerLexerStaticData == nullptr);
#endif
  auto staticData = std::make_unique<LLVMLexerStaticData>(
    std::vector<std::string>{
      "Global", "External", "Define", "Align", "Unreachable", "Br", "Ret", 
      "Call", "Load", "Store", "Alloca", "Phi", "Add", "Sub", "Mul", "Div", 
      "And", "Or", "Xor", "Shl", "Lshr", "Ashr", "Icmp", "Fcmp", "Sext", 
      "Zext", "Trunc", "Label", "Void", "Ptr", "I1", "I32", "I64", "F32", 
      "F64", "Eq", "Ne", "Ugt", "Uge", "Ult", "Ule", "Sgt", "Sge", "Slt", 
      "Sle", "Equals", "Comma", "LeftParen", "RightParen", "LeftBrace", 
      "RightBrace", "LeftBracket", "RightBracket", "At", "Percent", "Asterisk", 
      "Colon", "Cross", "GetElementPtr", "NumericIdentifier", "NamedIdentifier", 
      "IntegerLiteral", "FloatLiteral", "Whitespace", "Comment"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "'global'", "'external'", "'define'", "'align'", "'unreachable'", 
      "'br'", "'ret'", "'call'", "'load'", "'store'", "'alloca'", "'phi'", 
      "'add'", "'sub'", "'mul'", "'div'", "'and'", "'or'", "'xor'", "'shl'", 
      "'lshr'", "'ashr'", "'icmp'", "'fcmp'", "'sext'", "'zext'", "'trunc'", 
      "'label'", "'void'", "'ptr'", "'i1'", "'i32'", "'i64'", "'f32'", "'f64'", 
      "'eq'", "'ne'", "'ugt'", "'uge'", "'ult'", "'ule'", "'sgt'", "'sge'", 
      "'slt'", "'sle'", "'='", "','", "'('", "')'", "'{'", "'}'", "'['", 
      "']'", "'@'", "'%'", "'*'", "':'", "'x'", "'getelementptr'"
    },
    std::vector<std::string>{
      "", "Global", "External", "Define", "Align", "Unreachable", "Br", 
      "Ret", "Call", "Load", "Store", "Alloca", "Phi", "Add", "Sub", "Mul", 
      "Div", "And", "Or", "Xor", "Shl", "Lshr", "Ashr", "Icmp", "Fcmp", 
      "Sext", "Zext", "Trunc", "Label", "Void", "Ptr", "I1", "I32", "I64", 
      "F32", "F64", "Eq", "Ne", "Ugt", "Uge", "Ult", "Ule", "Sgt", "Sge", 
      "Slt", "Sle", "Equals", "Comma", "LeftParen", "RightParen", "LeftBrace", 
      "RightBrace", "LeftBracket", "RightBracket", "At", "Percent", "Asterisk", 
      "Colon", "Cross", "GetElementPtr", "NumericIdentifier", "NamedIdentifier", 
      "IntegerLiteral", "FloatLiteral", "Whitespace", "Comment"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,65,431,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,
  	1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,
  	1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,
  	7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,
  	10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,
  	13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,16,1,16,1,
  	16,1,16,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,20,1,
  	20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,
  	23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,
  	25,1,26,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,27,1,28,1,
  	28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,31,1,31,1,31,1,
  	31,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,35,1,
  	35,1,35,1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,38,1,38,1,38,1,38,1,39,1,
  	39,1,39,1,39,1,40,1,40,1,40,1,40,1,41,1,41,1,41,1,41,1,42,1,42,1,42,1,
  	42,1,43,1,43,1,43,1,43,1,44,1,44,1,44,1,44,1,45,1,45,1,46,1,46,1,47,1,
  	47,1,48,1,48,1,49,1,49,1,50,1,50,1,51,1,51,1,52,1,52,1,53,1,53,1,54,1,
  	54,1,55,1,55,1,56,1,56,1,57,1,57,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,
  	58,1,58,1,58,1,58,1,58,1,58,1,58,1,59,4,59,387,8,59,11,59,12,59,388,1,
  	60,1,60,5,60,393,8,60,10,60,12,60,396,9,60,1,61,1,61,5,61,400,8,61,10,
  	61,12,61,403,9,61,1,62,4,62,406,8,62,11,62,12,62,407,1,62,1,62,4,62,412,
  	8,62,11,62,12,62,413,1,63,4,63,417,8,63,11,63,12,63,418,1,63,1,63,1,64,
  	1,64,5,64,425,8,64,10,64,12,64,428,9,64,1,64,1,64,0,0,65,1,1,3,2,5,3,
  	7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,
  	33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,
  	28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,
  	79,40,81,41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,97,49,99,50,101,
  	51,103,52,105,53,107,54,109,55,111,56,113,57,115,58,117,59,119,60,121,
  	61,123,62,125,63,127,64,129,65,1,0,6,1,0,48,57,3,0,65,90,95,95,97,122,
  	4,0,48,57,65,90,95,95,97,122,1,0,49,57,3,0,9,10,13,13,32,32,2,0,10,10,
  	13,13,437,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,
  	0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,
  	1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,
  	0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,
  	0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,
  	1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,
  	0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,
  	0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,
  	1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,
  	0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,
  	0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,
  	0,0,117,1,0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,0,123,1,0,0,0,0,125,1,0,0,
  	0,0,127,1,0,0,0,0,129,1,0,0,0,1,131,1,0,0,0,3,138,1,0,0,0,5,147,1,0,0,
  	0,7,154,1,0,0,0,9,160,1,0,0,0,11,172,1,0,0,0,13,175,1,0,0,0,15,179,1,
  	0,0,0,17,184,1,0,0,0,19,189,1,0,0,0,21,195,1,0,0,0,23,202,1,0,0,0,25,
  	206,1,0,0,0,27,210,1,0,0,0,29,214,1,0,0,0,31,218,1,0,0,0,33,222,1,0,0,
  	0,35,226,1,0,0,0,37,229,1,0,0,0,39,233,1,0,0,0,41,237,1,0,0,0,43,242,
  	1,0,0,0,45,247,1,0,0,0,47,252,1,0,0,0,49,257,1,0,0,0,51,262,1,0,0,0,53,
  	267,1,0,0,0,55,273,1,0,0,0,57,279,1,0,0,0,59,284,1,0,0,0,61,288,1,0,0,
  	0,63,291,1,0,0,0,65,295,1,0,0,0,67,299,1,0,0,0,69,303,1,0,0,0,71,307,
  	1,0,0,0,73,310,1,0,0,0,75,313,1,0,0,0,77,317,1,0,0,0,79,321,1,0,0,0,81,
  	325,1,0,0,0,83,329,1,0,0,0,85,333,1,0,0,0,87,337,1,0,0,0,89,341,1,0,0,
  	0,91,345,1,0,0,0,93,347,1,0,0,0,95,349,1,0,0,0,97,351,1,0,0,0,99,353,
  	1,0,0,0,101,355,1,0,0,0,103,357,1,0,0,0,105,359,1,0,0,0,107,361,1,0,0,
  	0,109,363,1,0,0,0,111,365,1,0,0,0,113,367,1,0,0,0,115,369,1,0,0,0,117,
  	371,1,0,0,0,119,386,1,0,0,0,121,390,1,0,0,0,123,397,1,0,0,0,125,405,1,
  	0,0,0,127,416,1,0,0,0,129,422,1,0,0,0,131,132,5,103,0,0,132,133,5,108,
  	0,0,133,134,5,111,0,0,134,135,5,98,0,0,135,136,5,97,0,0,136,137,5,108,
  	0,0,137,2,1,0,0,0,138,139,5,101,0,0,139,140,5,120,0,0,140,141,5,116,0,
  	0,141,142,5,101,0,0,142,143,5,114,0,0,143,144,5,110,0,0,144,145,5,97,
  	0,0,145,146,5,108,0,0,146,4,1,0,0,0,147,148,5,100,0,0,148,149,5,101,0,
  	0,149,150,5,102,0,0,150,151,5,105,0,0,151,152,5,110,0,0,152,153,5,101,
  	0,0,153,6,1,0,0,0,154,155,5,97,0,0,155,156,5,108,0,0,156,157,5,105,0,
  	0,157,158,5,103,0,0,158,159,5,110,0,0,159,8,1,0,0,0,160,161,5,117,0,0,
  	161,162,5,110,0,0,162,163,5,114,0,0,163,164,5,101,0,0,164,165,5,97,0,
  	0,165,166,5,99,0,0,166,167,5,104,0,0,167,168,5,97,0,0,168,169,5,98,0,
  	0,169,170,5,108,0,0,170,171,5,101,0,0,171,10,1,0,0,0,172,173,5,98,0,0,
  	173,174,5,114,0,0,174,12,1,0,0,0,175,176,5,114,0,0,176,177,5,101,0,0,
  	177,178,5,116,0,0,178,14,1,0,0,0,179,180,5,99,0,0,180,181,5,97,0,0,181,
  	182,5,108,0,0,182,183,5,108,0,0,183,16,1,0,0,0,184,185,5,108,0,0,185,
  	186,5,111,0,0,186,187,5,97,0,0,187,188,5,100,0,0,188,18,1,0,0,0,189,190,
  	5,115,0,0,190,191,5,116,0,0,191,192,5,111,0,0,192,193,5,114,0,0,193,194,
  	5,101,0,0,194,20,1,0,0,0,195,196,5,97,0,0,196,197,5,108,0,0,197,198,5,
  	108,0,0,198,199,5,111,0,0,199,200,5,99,0,0,200,201,5,97,0,0,201,22,1,
  	0,0,0,202,203,5,112,0,0,203,204,5,104,0,0,204,205,5,105,0,0,205,24,1,
  	0,0,0,206,207,5,97,0,0,207,208,5,100,0,0,208,209,5,100,0,0,209,26,1,0,
  	0,0,210,211,5,115,0,0,211,212,5,117,0,0,212,213,5,98,0,0,213,28,1,0,0,
  	0,214,215,5,109,0,0,215,216,5,117,0,0,216,217,5,108,0,0,217,30,1,0,0,
  	0,218,219,5,100,0,0,219,220,5,105,0,0,220,221,5,118,0,0,221,32,1,0,0,
  	0,222,223,5,97,0,0,223,224,5,110,0,0,224,225,5,100,0,0,225,34,1,0,0,0,
  	226,227,5,111,0,0,227,228,5,114,0,0,228,36,1,0,0,0,229,230,5,120,0,0,
  	230,231,5,111,0,0,231,232,5,114,0,0,232,38,1,0,0,0,233,234,5,115,0,0,
  	234,235,5,104,0,0,235,236,5,108,0,0,236,40,1,0,0,0,237,238,5,108,0,0,
  	238,239,5,115,0,0,239,240,5,104,0,0,240,241,5,114,0,0,241,42,1,0,0,0,
  	242,243,5,97,0,0,243,244,5,115,0,0,244,245,5,104,0,0,245,246,5,114,0,
  	0,246,44,1,0,0,0,247,248,5,105,0,0,248,249,5,99,0,0,249,250,5,109,0,0,
  	250,251,5,112,0,0,251,46,1,0,0,0,252,253,5,102,0,0,253,254,5,99,0,0,254,
  	255,5,109,0,0,255,256,5,112,0,0,256,48,1,0,0,0,257,258,5,115,0,0,258,
  	259,5,101,0,0,259,260,5,120,0,0,260,261,5,116,0,0,261,50,1,0,0,0,262,
  	263,5,122,0,0,263,264,5,101,0,0,264,265,5,120,0,0,265,266,5,116,0,0,266,
  	52,1,0,0,0,267,268,5,116,0,0,268,269,5,114,0,0,269,270,5,117,0,0,270,
  	271,5,110,0,0,271,272,5,99,0,0,272,54,1,0,0,0,273,274,5,108,0,0,274,275,
  	5,97,0,0,275,276,5,98,0,0,276,277,5,101,0,0,277,278,5,108,0,0,278,56,
  	1,0,0,0,279,280,5,118,0,0,280,281,5,111,0,0,281,282,5,105,0,0,282,283,
  	5,100,0,0,283,58,1,0,0,0,284,285,5,112,0,0,285,286,5,116,0,0,286,287,
  	5,114,0,0,287,60,1,0,0,0,288,289,5,105,0,0,289,290,5,49,0,0,290,62,1,
  	0,0,0,291,292,5,105,0,0,292,293,5,51,0,0,293,294,5,50,0,0,294,64,1,0,
  	0,0,295,296,5,105,0,0,296,297,5,54,0,0,297,298,5,52,0,0,298,66,1,0,0,
  	0,299,300,5,102,0,0,300,301,5,51,0,0,301,302,5,50,0,0,302,68,1,0,0,0,
  	303,304,5,102,0,0,304,305,5,54,0,0,305,306,5,52,0,0,306,70,1,0,0,0,307,
  	308,5,101,0,0,308,309,5,113,0,0,309,72,1,0,0,0,310,311,5,110,0,0,311,
  	312,5,101,0,0,312,74,1,0,0,0,313,314,5,117,0,0,314,315,5,103,0,0,315,
  	316,5,116,0,0,316,76,1,0,0,0,317,318,5,117,0,0,318,319,5,103,0,0,319,
  	320,5,101,0,0,320,78,1,0,0,0,321,322,5,117,0,0,322,323,5,108,0,0,323,
  	324,5,116,0,0,324,80,1,0,0,0,325,326,5,117,0,0,326,327,5,108,0,0,327,
  	328,5,101,0,0,328,82,1,0,0,0,329,330,5,115,0,0,330,331,5,103,0,0,331,
  	332,5,116,0,0,332,84,1,0,0,0,333,334,5,115,0,0,334,335,5,103,0,0,335,
  	336,5,101,0,0,336,86,1,0,0,0,337,338,5,115,0,0,338,339,5,108,0,0,339,
  	340,5,116,0,0,340,88,1,0,0,0,341,342,5,115,0,0,342,343,5,108,0,0,343,
  	344,5,101,0,0,344,90,1,0,0,0,345,346,5,61,0,0,346,92,1,0,0,0,347,348,
  	5,44,0,0,348,94,1,0,0,0,349,350,5,40,0,0,350,96,1,0,0,0,351,352,5,41,
  	0,0,352,98,1,0,0,0,353,354,5,123,0,0,354,100,1,0,0,0,355,356,5,125,0,
  	0,356,102,1,0,0,0,357,358,5,91,0,0,358,104,1,0,0,0,359,360,5,93,0,0,360,
  	106,1,0,0,0,361,362,5,64,0,0,362,108,1,0,0,0,363,364,5,37,0,0,364,110,
  	1,0,0,0,365,366,5,42,0,0,366,112,1,0,0,0,367,368,5,58,0,0,368,114,1,0,
  	0,0,369,370,5,120,0,0,370,116,1,0,0,0,371,372,5,103,0,0,372,373,5,101,
  	0,0,373,374,5,116,0,0,374,375,5,101,0,0,375,376,5,108,0,0,376,377,5,101,
  	0,0,377,378,5,109,0,0,378,379,5,101,0,0,379,380,5,110,0,0,380,381,5,116,
  	0,0,381,382,5,112,0,0,382,383,5,116,0,0,383,384,5,114,0,0,384,118,1,0,
  	0,0,385,387,7,0,0,0,386,385,1,0,0,0,387,388,1,0,0,0,388,386,1,0,0,0,388,
  	389,1,0,0,0,389,120,1,0,0,0,390,394,7,1,0,0,391,393,7,2,0,0,392,391,1,
  	0,0,0,393,396,1,0,0,0,394,392,1,0,0,0,394,395,1,0,0,0,395,122,1,0,0,0,
  	396,394,1,0,0,0,397,401,7,3,0,0,398,400,7,0,0,0,399,398,1,0,0,0,400,403,
  	1,0,0,0,401,399,1,0,0,0,401,402,1,0,0,0,402,124,1,0,0,0,403,401,1,0,0,
  	0,404,406,7,0,0,0,405,404,1,0,0,0,406,407,1,0,0,0,407,405,1,0,0,0,407,
  	408,1,0,0,0,408,409,1,0,0,0,409,411,5,46,0,0,410,412,7,0,0,0,411,410,
  	1,0,0,0,412,413,1,0,0,0,413,411,1,0,0,0,413,414,1,0,0,0,414,126,1,0,0,
  	0,415,417,7,4,0,0,416,415,1,0,0,0,417,418,1,0,0,0,418,416,1,0,0,0,418,
  	419,1,0,0,0,419,420,1,0,0,0,420,421,6,63,0,0,421,128,1,0,0,0,422,426,
  	5,59,0,0,423,425,8,5,0,0,424,423,1,0,0,0,425,428,1,0,0,0,426,424,1,0,
  	0,0,426,427,1,0,0,0,427,429,1,0,0,0,428,426,1,0,0,0,429,430,6,64,0,0,
  	430,130,1,0,0,0,8,0,388,394,401,407,413,418,426,1,6,0,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  llvmlexerLexerStaticData = std::move(staticData);
}

}

LLVMLexer::LLVMLexer(CharStream *input) : Lexer(input) {
  LLVMLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *llvmlexerLexerStaticData->atn, llvmlexerLexerStaticData->decisionToDFA, llvmlexerLexerStaticData->sharedContextCache);
}

LLVMLexer::~LLVMLexer() {
  delete _interpreter;
}

std::string LLVMLexer::getGrammarFileName() const {
  return "LLVMLexer.g4";
}

const std::vector<std::string>& LLVMLexer::getRuleNames() const {
  return llvmlexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& LLVMLexer::getChannelNames() const {
  return llvmlexerLexerStaticData->channelNames;
}

const std::vector<std::string>& LLVMLexer::getModeNames() const {
  return llvmlexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& LLVMLexer::getVocabulary() const {
  return llvmlexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView LLVMLexer::getSerializedATN() const {
  return llvmlexerLexerStaticData->serializedATN;
}

const atn::ATN& LLVMLexer::getATN() const {
  return *llvmlexerLexerStaticData->atn;
}




void LLVMLexer::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  llvmlexerLexerInitialize();
#else
  ::antlr4::internal::call_once(llvmlexerLexerOnceFlag, llvmlexerLexerInitialize);
#endif
}
